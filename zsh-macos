# Amazon Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
export DOCKER_DEFAULT_PLATFORM=linux/amd64
export ZSH="$HOME/.oh-my-zsh"
export PATH=/opt/homebrew/bin:$PATH
export PATH=/opt/homebrew/bin:/opt/homebrew/bin:/usr/local/bin:/System/Cryptexes/App/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/local/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/bin:/var/run/com.apple.security.cryptexd/codex.system/bootstrap/usr/appleinternal/bin:/opt/homebrew/bin:/opt/homebrew/bin:/opt/homebrew/bin
export PATH="/opt/homebrew/opt/node@18/bin:$PATH"

ZSH_THEME="robbyrussell"

plugins=(git)

source $ZSH/oh-my-zsh.sh

source ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

curljson() {
  curl "$@" | jq .
}

function gitfetch() {
    if [ -z "$1" ]; then
        echo "Usage: gf <branch_name>"
        return 1
    fi
    git fetch origin $1 && git fetch . origin/$1:$1
}

gitall() {
  # Set the default commit message to "update" if $1 is not provided
  local commit_message=${1:-"update"}
  
  # Get the name of the current branch
  local current_branch=$(git rev-parse --abbrev-ref HEAD)

  # Check if there are any changes
  if [[ -z "$(git status --porcelain)" ]]; then
    echo $fg_bold[red]" 😡 No changes to commit"$reset_color
    return 1
  fi

  # Check if current branch is protected
  local protected_branches=("master" "production" "staging" "develop" "main" "dev" "stg" "prod", 'uat')
  if [[ " ${protected_branches[@]} " =~ " ${current_branch} " ]]; then
    echo $fg[white]"${fg[yellow]}💥 Warning:${reset_color} You are about to commit to ${fg_bold[yellow]}${current_branch}${reset_color} branch"$reset_color
    echo $fg[white]"Do you want to continue? (y/N): "$reset_color
    read -r response
    if [[ ! "$response" =~ ^[Yy1]$ ]]; then
      echo $fg_bold[red]" ❌ Operation cancelled"$reset_color
      return 1
    fi
  fi

  # Ask user if they want to push to the current branch FIRST
  echo $fg[white]"Do you want to push to ${fg_bold[yellow]}${current_branch}${reset_color} branch after commit? (y/N): "$reset_color
  read -r push_response
  local should_push=false
  if [[ "$push_response" =~ ^[Yy1]$ ]]; then
    should_push=true
  fi

  echo ""
  # Add all changes, commit with the message
  echo $fg_bold[yellow]" 👉 Checking status before add: "$reset_color
  git status
  
  git add -A
  echo ""
  echo $fg_bold[yellow]" 👉 Added all changes, checking status: "$reset_color
  git status

  echo $fg_bold[yellow]" 👉 Committing with message: $commit_message"$reset_color
  git commit -m "$commit_message"
  echo ""

  # Push to the current branch if user wanted to
  if [[ "$should_push" = true ]]; then
    echo $fg_bold[yellow]" 👉 Pushing to the current branch: $current_branch"$reset_color
    git push origin "$current_branch"
    echo ""
    echo $fg_bold[yellow]" 🚀 Pushed to the branch: $current_branch"$reset_color
    
    # Get the repository URL and clean it
    local repo_url=$(git config --get remote.origin.url)
    
    # Convert SSH URL to HTTPS and clean up
    repo_url=$(echo $repo_url | \
      sed 's|git@github-thanhle2:|https://github.com/|' | \
      sed 's|git@github.com:|https://github.com/|' | \
      sed -E 's|https://.*@github.com/|https://github.com/|')
    
    # Remove .git extension if present
    repo_url=${repo_url%.git}
    
    echo $fg_bold[green]" 🔗 Repo URL: $repo_url"$reset_color
  else
    # # Show 5 recent commits if not pushing
    # echo $fg_bold[yellow]"\n 📜 Recent commits:"$reset_color
    # git log -5 --oneline --decorate
  fi
}

gitempty() {
  # Get the name of the current branch
  local current_branch=$(git rev-parse --abbrev-ref HEAD)

  # Add all changes, commit with the message, and push to the current branch
  git add -A && git commit --allow-empty -m "empty commit" && git push origin "$current_branch"

  echo "Committing at the branch: $current_branch"
}

function work_in_progress() {
  if $(git log -n 1 2>/dev/null | grep -q -c "\-\-wip\-\-"); then
    echo "[WIP!!] "
  fi
}
TIME=%{$fg_bold[yellow]%}%D{%H:%M:%S}
local ret_status="%(?:%{$fg_bold[cyan]%}➜ $TIME ~ :%{$fg_bold[red]%}➜ )"
local git_branch='$(git_prompt_info)%{$reset_color%}'
local git_wip='%{$fg[yellow]%}$(work_in_progress)%{$reset_color%}'

PROMPT="${ret_status}%{$fg[cyan]%}%c ➜%{$reset_color%} ${git_branch}%{$fg[yellow]%}✗ ${git_wip}%{$fg[white]%}"
ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}(%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%})%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"

alias dc="docker-compose"
alias k="kubectl"
alias eks="eksctl"
alias tf="terraform"
alias s2="sshpass -p '=)))' ssh root@62.146.234.165"
alias sthanhle="sshpass -p '1' ssh thanhle@62.146.234.165"
alias sxbot="sshpass -p '=)))' ssh xbot@62.146.234.165"
alias sthanhle2="sshpass -p '1' ssh sotatek@10.4.11.31"
alias saffcoin="sshpass -p 'Qb2uRWCsouOhLEP' ssh affcodev@62.210.217.182"
alias svicg="ssh root@171.244.49.212"
alias re-install="rm -rf node_modules && rm -rf yarn.lock && yarn"
alias pip='python3 -m pip'
alias s-foreon='sshpass -p '\''1'\'' ssh sotatek@172.16.200.58'
alias sthao3='sshpass -p '\''1'\'' ssh sotatek@10.4.11.35'

# Amazon Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"
export PATH="$HOME/Library/Python/3.9/bin:$PATH"
export PATH=$PATH:$HOME/go/bin
export DEEPSEEK_API_KEY=sk-ac04cfc446bf4ca991777c4fd349d57c
alias reset-cursor="bash /Users/thanhle/cursor.sh && pkill -x Cursor && open -a Cursor"
alias s-dextrade-dev='ssh sinhvu@34.134.91.80'
alias s-netalabs-dev='ssh -i ~/.ssh/devopsvm quangnguyen@34.69.158.56'

# Added by Windsurf
export PATH="/Users/thanhle/.codeium/windsurf/bin:$PATH"

# bun completions
[ -s "/Users/thanhle/.bun/_bun" ] && source "/Users/thanhle/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/thanhle/.cache/lm-studio/bin"
