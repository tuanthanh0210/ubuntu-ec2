# Amazon Q pre block. Keep at the top of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"
export DOCKER_DEFAULT_PLATFORM=linux/amd64
DISABLE_AUTO_UPDATE="true"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

curljson() {
  curl "$@" | jq .
}

function gitfetch() {
    if [ -z "$1" ]; then
        echo "Usage: gf <branch_name>"
        return 1
    fi
    git fetch origin $1 && git fetch . origin/$1:$1
}

gitall() {
  # Set the default commit message to "update" if $1 is not provided
  local commit_message=${1:-"update"}
  
  # Get the name of the current branch
  local current_branch=$(git rev-parse --abbrev-ref HEAD)

  # Check if there are any changes
  if [[ -z "$(git status --porcelain)" ]]; then
    echo $fg_bold[red]" 😡 No changes to commit"$reset_color
    return 1
  fi

  # Check if current branch is protected
  local protected_branches=("master" "production" "staging" "develop" "main" "dev" "stg" "prod", 'uat')
  if [[ " ${protected_branches[@]} " =~ " ${current_branch} " ]]; then
    echo $fg[white]"${fg[yellow]}💥 Warning:${reset_color} You are about to commit to ${fg_bold[yellow]}${current_branch}${reset_color} branch"$reset_color
    echo $fg[white]"Do you want to continue? (y/N): "$reset_color
    read -r response
    if [[ ! "$response" =~ ^[Yy1]$ ]]; then
      echo $fg_bold[red]" ❌ Operation cancelled"$reset_color
      return 1
    fi
  fi

  # Ask user if they want to push to the current branch FIRST
  echo $fg[white]"Do you want to push to ${fg_bold[yellow]}${current_branch}${reset_color} branch after commit? (y/N): "$reset_color
  read -r push_response
  local should_push=false
  if [[ "$push_response" =~ ^[Yy1]$ ]]; then
    should_push=true
  fi

  echo ""
  # Add all changes, commit with the message
  echo $fg_bold[yellow]" 👉 Checking status before add: "$reset_color
  git status
  
  git add -A
  echo ""
  echo $fg_bold[yellow]" 👉 Added all changes, checking status: "$reset_color
  git status

  echo $fg_bold[yellow]" 👉 Committing with message: $commit_message"$reset_color
  git commit -m "$commit_message"
  echo ""

  # Push to the current branch if user wanted to
  if [[ "$should_push" = true ]]; then
    echo $fg_bold[yellow]" 👉 Pushing to the current branch: $current_branch"$reset_color
    git push origin "$current_branch"
    echo ""
    echo $fg_bold[yellow]" 🚀 Pushed to the branch: $current_branch"$reset_color
    
    # Get the repository URL and clean it
    local repo_url=$(git config --get remote.origin.url)
    
    # Convert SSH URL to HTTPS and clean up
    repo_url=$(echo $repo_url | \
      sed 's|git@github-thanhle2:|https://github.com/|' | \
      sed 's|git@github.com:|https://github.com/|' | \
      sed 's|git@thanhle:|https://github.com/|' | \
      sed -E 's|https://.*@github.com/|https://github.com/|')
      
    
    # Remove .git extension if present
    repo_url=${repo_url%.git}
    
    echo $fg_bold[green]" 🔗 Repo URL: $repo_url"$reset_color
  else
    # # Show 5 recent commits if not pushing
    # echo $fg_bold[yellow]"\n 📜 Recent commits:"$reset_color
    # git log -5 --oneline --decorate
  fi
}

gitempty() {
  # Get the name of the current branch
  local current_branch=$(git rev-parse --abbrev-ref HEAD)

  # Add all changes, commit with the message, and push to the current branch
  git add -A && git commit --allow-empty -m "empty commit" && git push origin "$current_branch"

  echo "Committing at the branch: $current_branch"
}

function work_in_progress() {
  if $(git log -n 1 2>/dev/null | grep -q -c "\-\-wip\-\-"); then
    echo "[WIP!!] "
  fi
}

function work_in_progress() {
  if $(git log -n 1 2>/dev/null | grep -q -c "\-\-wip\-\-"); then
    echo "[WIP!!] "
  fi
}
TIME=%{$fg_bold[yellow]%}%D{%H:%M:%S}
local ret_status="%(?:%{$fg_bold[cyan]%}➜ $TIME ~ :%{$fg_bold[red]%}➜ )"
local git_branch='$(git_prompt_info)%{$reset_color%}'
local git_wip='%{$fg[yellow]%}$(work_in_progress)%{$reset_color%}'

PROMPT="${ret_status}%{$fg[cyan]%}%c ➜%{$reset_color%} ${git_branch}%{$fg[yellow]%}✗ ${git_wip}%{$fg[white]%}"
ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}(%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%})%{$fg[yellow]%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%})"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

alias dc="docker-compose"
alias k="kubectl"
alias eks="eksctl"
alias tf="terraform"
alias re-install="rm -rf node_modules && rm -rf yarn.lock && yarn"
alias THANHLE2="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"

# Added by LM Studio CLI (lms)
export PATH="$PATH:/Users/justin/.lmstudio/bin"
alias cs="cursor"
alias ws="windsurf"

# Amazon Q post block. Keep at the bottom of this file.
[[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]] && builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"
export PATH="/opt/homebrew/opt/python@3.11/bin:$PATH"
export PATH="/opt/homebrew/opt/python@3.11/libexec/bin:$PATH"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/justin/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/justin/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/justin/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/justin/Downloads/google-cloud-sdk/completion.zsh.inc'; fi

# Added by Windsurf
export PATH="/Users/justin/.codeium/windsurf/bin:$PATH"

# Added by Windsurf
export PATH="/Users/justin/.codeium/windsurf/bin:$PATH"

# bun completions
[ -s "/Users/justin/.bun/_bun" ] && source "/Users/justin/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
